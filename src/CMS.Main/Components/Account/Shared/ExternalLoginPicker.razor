@using CMS.Main.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <div class="text-sm text-neutral-400">
        <p>
            There are no external authentication services configured. See this
            <a href="https://go.microsoft.com/fwlink/?LinkID=532715" class="text-purple-500 hover:text-purple-400 underline">
                article about setting up this ASP.NET application to support logging in via external services
            </a>.
        </p>
    </div>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken/>
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl"/>
            <div class="flex flex-wrap gap-2">
                @foreach (var provider in externalLogins)
                {
                    <button type="submit" 
                            name="provider" 
                            value="@provider.Name" 
                            title="@($"Log in using your {provider.DisplayName} account")"
                            class="inline-flex items-center justify-center rounded-full font-medium text-neutral-100 ring-0 ring-purple-500/0 hover:bg-linear-to-tl hover:from-purple-500/20 hover:to-transparent hover:ring-1 hover:ring-purple-500/40 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 focus:ring-offset-neutral-900 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 text-sm px-3 py-2"
                            aria-label="@($"Log in with {provider.DisplayName}")">
                        <span class="material-symbols-outlined icons-default text-base mr-2">login</span>
                        @provider.DisplayName
                    </button>
                }
            </div>
        </div>
    </form>
}

@code {
    
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }

}