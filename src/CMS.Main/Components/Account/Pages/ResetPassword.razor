@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using CMS.Main.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject IDbContextConcurrencyHelper ConcurrencyHelper

<PageTitle>Reset password</PageTitle>

<div class="min-h-screen bg-neutral-900 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div>
            <h1 class="text-2xl font-semibold text-neutral-100 text-center">Reset your password</h1>
            <p class="mt-2 text-center text-sm text-neutral-400">
                Enter your new password below.
            </p>
        </div>
        
        <div class="rounded-xl border border-neutral-800 bg-gradient-to-b from-neutral-800 to-neutral-800/90 shadow-sm p-6">
            <StatusMessage Message="@Message"/>
            
            <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="validation-summary" role="alert"/>

                <input type="hidden" name="Input.Code" value="@Input.Code"/>
                
                <div class="space-y-4">
                    <div>
                        <label for="Input.Email" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">
                            Email
                        </label>
                        <InputText @bind-Value="Input.Email" 
                                  id="Input.Email" 
                                  class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-4 py-3" 
                                  autocomplete="username" 
                                  aria-required="true" 
                                  placeholder="name@example.com"/>
                        <ValidationMessage For="() => Input.Email" class="validation-message"/>
                    </div>
                    
                    <div>
                        <label for="Input.Password" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">
                            New Password
                        </label>
                        <InputText type="password" 
                                  @bind-Value="Input.Password" 
                                  id="Input.Password" 
                                  class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-4 py-3" 
                                  autocomplete="new-password" 
                                  aria-required="true" 
                                  placeholder="Enter your new password"/>
                        <ValidationMessage For="() => Input.Password" class="validation-message"/>
                    </div>
                    
                    <div>
                        <label for="Input.ConfirmPassword" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">
                            Confirm Password
                        </label>
                        <InputText type="password" 
                                  @bind-Value="Input.ConfirmPassword" 
                                  id="Input.ConfirmPassword" 
                                  class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-4 py-3" 
                                  autocomplete="new-password" 
                                  aria-required="true" 
                                  placeholder="Confirm your new password"/>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="validation-message"/>
                    </div>
                    
                    <div>
                        <PrimaryButton Type="submit" Variant="ButtonVariant.Primary" Icon="refresh" aria-label="Reset Password">Reset Password</PrimaryButton>
                    </div>
                </div>
            </EditForm>
            
            <div class="mt-6 text-center">
                <a href="Account/Login" 
                   class="text-sm text-purple-500 hover:text-purple-600">
                    <span class="material-symbols-outlined icons-default text-base mr-1">arrow_back</span>
                    Back to Login
                </a>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.FindByEmailAsync(Input.Email));
        if (user is null)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.ResetPasswordAsync(user, Input.Code, Input.Password));
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }

}