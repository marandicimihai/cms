@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using CMS.Main.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IDbContextConcurrencyHelper ConcurrencyHelper

<PageTitle>Log in</PageTitle>

<div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <Paper Class="max-w-md w-full space-y-8">
        <div>
            <h1 class="text-2xl font-semibold text-neutral-100 text-center">Sign in to your account</h1>
            <p class="mt-2 text-center text-sm text-neutral-400">
                Or
                <LinkButton Variant="ButtonVariant.Primary" Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">create a new account</LinkButton>
            </p>
        </div>
        
            <StatusMessage Message="@errorMessage"/>
            
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator/>
                <ValidationSummary class="validation-summary" role="alert"/>
                
                <div class="space-y-4">
                    <div>
                        <label for="Input.Email" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">
                            Email
                        </label>
                        <InputText @bind-Value="Input.Email" 
                                  id="Input.Email" 
                                  class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-3 py-2" 
                                  autocomplete="username" 
                                  aria-required="true" 
                                  placeholder="name@example.com"/>
                        <ValidationMessage For="() => Input.Email" class="validation-message"/>
                    </div>
                    
                    <div>
                        <label for="Input.Password" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">
                            Password
                        </label>
                        <InputText type="password" 
                                  @bind-Value="Input.Password" 
                                  id="Input.Password" 
                                  class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-3 py-2" 
                                  autocomplete="current-password" 
                                  aria-required="true" 
                                  placeholder="password"/>
                        <ValidationMessage For="() => Input.Password" class="validation-message"/>
                    </div>
                    
                    <div>
                        <PrimaryButton Type="submit" Variant="ButtonVariant.Primary" Icon="login" aria-label="Sign in">Sign in</PrimaryButton>
                    </div>
                </div>
            </EditForm>
            
            <div class="mt-6 text-center space-y-2">
                <div>
                    <a href="Account/ForgotPassword" 
                       class="text-sm text-purple-500 hover:text-purple-600">
                        Forgot your password?
                    </a>
                </div>
                <div>
                    <a href="Account/ResendEmailConfirmation" 
                       class="text-sm text-purple-500 hover:text-purple-600">
                        Resend email confirmation
                    </a>
                </div>
            
            
            
        </div>
    </Paper>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await ConcurrencyHelper.ExecuteAsync(_ => SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false));
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; } = true;
    }

}