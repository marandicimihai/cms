@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using CMS.Main.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IDbContextConcurrencyHelper ConcurrencyHelper

<PageTitle>Register</PageTitle>

<div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <Paper Class="max-w-md w-full space-y-8">
        <div>
            <h1 class="text-2xl font-semibold text-neutral-100 text-center">Create your account</h1>
            <p class="mt-2 text-center text-sm text-neutral-400">
                Already have an account?
                <LinkButton Variant="ButtonVariant.Primary" Href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Sign in</LinkButton>
            </p>
        </div>
        
            <StatusMessage Message="@Message"/>
            
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator/>
                <ValidationSummary class="validation-summary" role="alert"/>
                
                <div class="space-y-4">
                    <div>
                        <label for="Input.Email" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-1">
                            Email
                        </label>
                        <InputText @bind-Value="Input.Email" 
                                  id="Input.Email" 
                                  class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-3 py-2" 
                                  autocomplete="username" 
                                  aria-required="true" 
                                  placeholder="name@example.com"/>
                        <ValidationMessage For="() => Input.Email" class="validation-message"/>
                    </div>
                    
                    <div>
                        <label for="Input.Password" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-1">
                            Password
                        </label>
                        <InputText type="password" 
                                  @bind-Value="Input.Password" 
                                  id="Input.Password" 
                                  class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-3 py-2" 
                                  autocomplete="new-password" 
                                  aria-required="true" 
                                  placeholder="password"/>
                        <ValidationMessage For="() => Input.Password" class="validation-message"/>
                    </div>
                    
                    <div>
                        <label for="Input.ConfirmPassword" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-1">
                            Confirm Password
                        </label>
                        <InputText type="password" 
                                  @bind-Value="Input.ConfirmPassword" 
                                  id="Input.ConfirmPassword" 
                                  class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-3 py-2" 
                                  autocomplete="new-password" 
                                  aria-required="true" 
                                  placeholder="confirm password"/>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="validation-message"/>
                    </div>
                    
                    <div>
                        <PrimaryButton Type="submit" Variant="ButtonVariant.Primary" Icon="person_add" aria-label="Create Account">Create Account</PrimaryButton>
                    </div>
                </div>
            </EditForm>
            
            
        
    </Paper>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await ConcurrencyHelper.ExecuteAsync(async _ =>
        {
            await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
            var emailStore = GetEmailStore();
            await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        });

        var result = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.CreateAsync(user, Input.Password));

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.GetUserIdAsync(user));
        var code = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.GenerateEmailConfirmationTokenAsync(user));
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await ConcurrencyHelper.ExecuteAsync(_ => SignInManager.SignInAsync(user, isPersistent: false));
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}