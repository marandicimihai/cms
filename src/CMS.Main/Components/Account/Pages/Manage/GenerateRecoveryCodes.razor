@page "/Account/Manage/GenerateRecoveryCodes"

@using CMS.Main.Data
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<GenerateRecoveryCodes> Logger
@inject IDbContextConcurrencyHelper ConcurrencyHelper

<PageTitle>Generate two-factor authentication (2FA) recovery codes</PageTitle>

@if (recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message"/>
}
else
{
    <div class="max-w-5xl">
        <div class="mb-4">
            <h1 class="text-2xl font-semibold text-neutral-100">Generate two-factor authentication (2FA) recovery codes</h1>
        </div>
        <div class="rounded-xl border border-neutral-800 bg-linear-to-b from-neutral-800 to-neutral-800/90 shadow-sm p-4 max-w-md">
            <div class="bg-amber-500/10 border border-amber-500/20 text-amber-400 text-sm p-3 rounded-md mb-4 flex items-center">
                <span class="material-symbols-outlined icons-default text-base mr-2">warning</span>
                <div>
                    <strong>Put these codes in a safe place.</strong>
                    <p>If you lose your device and don't have the recovery codes you will lose access to your account.</p>
                    <p>Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key used in an authenticator app you should <a href="Account/Manage/ResetAuthenticator" class="text-purple-500 hover:text-purple-600 underline">reset your authenticator keys</a>.</p>
                </div>
            </div>
            <form @formname="generate-recovery-codes" @onsubmit="OnSubmitAsync" method="post">
                <AntiforgeryToken/>
                <PrimaryButton Type="submit" Variant="ButtonVariant.Primary" Icon="refresh" aria-label="Generate Recovery Codes">Generate Recovery Codes</PrimaryButton>
            </form>
        </div>
    </div>
}

@code {
    private string? message;
    private ApplicationUser user = default!;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        var isTwoFactorEnabled = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.GetTwoFactorEnabledAsync(user));
        if (!isTwoFactorEnabled)
        {
            throw new InvalidOperationException("Cannot generate recovery codes for user because they do not have 2FA enabled.");
        }
    }

    private async Task OnSubmitAsync()
    {
        var userId = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.GetUserIdAsync(user));
        recoveryCodes = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10));
        message = "You have generated new recovery codes.";

        Logger.LogInformation("User with ID '{UserId}' has generated new 2FA recovery codes.", userId);
    }

}