@page "/Account/Manage/Disable2fa"

@using CMS.Main.Data
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<Disable2fa> Logger
@inject IDbContextConcurrencyHelper ConcurrencyHelper

<PageTitle>Disable two-factor authentication (2FA)</PageTitle>

<StatusMessage/>
<h3 class="text-lg font-medium">Disable two-factor authentication (2FA)</h3>

<div class="alert alert-warning bg-amber-100 text-amber-900 border border-amber-200 rounded-md p-3" role="alert">
    <p class="text-sm">
        <strong>This action only disables 2FA.</strong>
    </p>
    <p class="text-sm">
        Disabling 2FA does not change the keys used in authenticator apps. If you wish to change the key
        used in an authenticator app you should <a href="Account/Manage/ResetAuthenticator" class="text-blue-600 hover:underline">reset your authenticator keys.</a>
    </p>
</div>

<div>
    <form @formname="disable-2fa" @onsubmit="OnSubmitAsync" method="post">
    <AntiforgeryToken/>
    <PrimaryButton Type="submit" Variant="ButtonVariant.Danger" aria-label="Disable 2FA">Disable 2FA</PrimaryButton>
    </form>
</div>

@code {
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        if (HttpMethods.IsGet(HttpContext.Request.Method) && !await ConcurrencyHelper.ExecuteAsync(_ => UserManager.GetTwoFactorEnabledAsync(user)))
        {
            throw new InvalidOperationException("Cannot disable 2FA for user as it's not currently enabled.");
        }
    }

    private async Task OnSubmitAsync()
    {
        var disable2faResult = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.SetTwoFactorEnabledAsync(user, false));
        if (!disable2faResult.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred disabling 2FA.");
        }

        var userId = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.GetUserIdAsync(user));
        Logger.LogInformation("User with ID '{UserId}' has disabled 2fa.", userId);
        RedirectManager.RedirectToWithStatus(
            "Account/Manage/TwoFactorAuthentication",
            "2fa has been disabled. You can reenable 2fa when you setup an authenticator app",
            HttpContext);
    }

}