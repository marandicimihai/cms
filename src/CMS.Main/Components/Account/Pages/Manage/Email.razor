@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using CMS.Main.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager
@inject IDbContextConcurrencyHelper ConcurrencyHelper

<PageTitle>Manage email</PageTitle>

<div class="max-w-screen-lg mx-auto p-4">
    <div class="mb-4">
        <h1 class="text-2xl font-semibold text-neutral-100">Manage email</h1>
        <StatusMessage Message="@message"/>
    </div>
    <div class="rounded-xl border border-neutral-800 bg-gradient-to-b from-neutral-800 to-neutral-800/90 shadow-sm p-4 max-w-md">
        <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
            <AntiforgeryToken/>
        </form>
        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="validation-summary" role="alert"/>
            @if (isEmailConfirmed)
            {
                <div class="mb-4">
                    <label for="email" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">Email</label>
                    <input type="text" value="@email" id="email" class="block w-full rounded-full border border-neutral-800 bg-neutral-700 shadow-sm text-sm px-3 py-2 text-neutral-500 cursor-not-allowed" placeholder="Enter your email" disabled/>
                </div>
            }
            else
            {
                <div class="mb-4">
                    <label for="email" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">Email</label>
                    <input type="text" value="@email" id="email" class="block w-full rounded-full border border-neutral-800 bg-neutral-700 shadow-sm text-sm px-3 py-2 text-neutral-500 cursor-not-allowed" placeholder="Enter your email" disabled/>
                    <div class="mt-2">
                        <PrimaryButton Type="submit" Variant="ButtonVariant.Primary" form="send-verification-form">Send verification email</PrimaryButton>
                    </div>
                </div>
            }
            <div class="mb-4">
                <label for="Input.NewEmail" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">New email</label>
                <InputText @bind-Value="Input.NewEmail" id="Input.NewEmail" class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-3 py-2" autocomplete="email" aria-required="true" placeholder="Enter a new email"/>
                <ValidationMessage For="() => Input.NewEmail" class="validation-message"/>
            </div>
            <PrimaryButton Type="submit" Variant="ButtonVariant.Primary" aria-label="Change email">Change email</PrimaryButton>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.GetEmailAsync(user));
        isEmailConfirmed = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.IsEmailConfirmedAsync(user));

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }
        var userId = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.GetUserIdAsync(user));
        var code = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail));
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });
        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));
        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }
        var userId = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.GetUserIdAsync(user));
        var code = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.GenerateEmailConfirmationTokenAsync(user));
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }

}