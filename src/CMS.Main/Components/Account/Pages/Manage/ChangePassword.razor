@page "/Account/Manage/ChangePassword"
@using System.ComponentModel.DataAnnotations
@using CMS.Main.Data
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger
@inject DbContextConcurrencyHelper ConcurrencyHelper

<PageTitle>Change password</PageTitle>

<h3 class="text-lg font-medium">Change password</h3>
<StatusMessage Message="@message"/>
<div class="row">
    <div class="col-xl-6">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-rose-600 text-xs" role="alert"/>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.OldPassword" id="Input.OldPassword"
                           class="form-control text-sm px-3 py-2 rounded-md border border-slate-300 focus:border-blue-500 focus:ring-blue-500"
                           autocomplete="current-password" aria-required="true" placeholder="Enter the old password"/>
                <label for="Input.OldPassword" class="form-label text-xs uppercase tracking-wide">Old password</label>
                <ValidationMessage For="() => Input.OldPassword" class="text-rose-600 text-xs"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" id="Input.NewPassword"
                           class="form-control text-sm px-3 py-2 rounded-md border border-slate-300 focus:border-blue-500 focus:ring-blue-500"
                           autocomplete="new-password" aria-required="true" placeholder="Enter the new password"/>
                <label for="Input.NewPassword" class="form-label text-xs uppercase tracking-wide">New password</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-rose-600 text-xs"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword"
                           class="form-control text-sm px-3 py-2 rounded-md border border-slate-300 focus:border-blue-500 focus:ring-blue-500"
                           autocomplete="new-password" aria-required="true" placeholder="Enter the new password"/>
                <label for="Input.ConfirmPassword" class="form-label text-xs uppercase tracking-wide">Confirm
                    password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-rose-600 text-xs"/>
            </div>
            <button type="submit"
                    class="w-100 btn bg-blue-600 text-white hover:bg-blue-700 text-sm font-medium px-3 py-2 rounded-md">
                Update password
            </button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.HasPasswordAsync(user));
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword));
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await ConcurrencyHelper.ExecuteAsync(_ => SignInManager.RefreshSignInAsync(user));
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}