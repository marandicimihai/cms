@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using CMS.Main.Data
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger
@inject IDbContextConcurrencyHelper ConcurrencyHelper

<PageTitle>Change password</PageTitle>

<div class="max-w-screen-lg mx-auto p-4">
    <div class="mb-4">
        <h1 class="text-2xl font-semibold text-neutral-100">Change password</h1>
        <StatusMessage Message="@message"/>
    </div>
    <div class="rounded-xl border border-neutral-800 bg-gradient-to-b from-neutral-800 to-neutral-800/90 shadow-sm p-4 max-w-md">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="validation-summary" role="alert"/>
            <div class="space-y-4">
                <div>
                    <label for="Input.OldPassword" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">Old password</label>
                    <InputText type="password" @bind-Value="Input.OldPassword" id="Input.OldPassword" class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-4 py-3" autocomplete="current-password" aria-required="true" placeholder="Enter the old password"/>
                    <ValidationMessage For="() => Input.OldPassword" class="validation-message"/>
                </div>
                <div>
                    <label for="Input.NewPassword" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">New password</label>
                    <InputText type="password" @bind-Value="Input.NewPassword" id="Input.NewPassword" class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-4 py-3" autocomplete="new-password" aria-required="true" placeholder="Enter the new password"/>
                    <ValidationMessage For="() => Input.NewPassword" class="validation-message"/>
                </div>
                <div>
                    <label for="Input.ConfirmPassword" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">Confirm password</label>
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-4 py-3" autocomplete="new-password" aria-required="true" placeholder="Enter the new password"/>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="validation-message"/>
                </div>
                <PrimaryButton Type="submit" Variant="ButtonVariant.Primary" aria-label="Update password">Update password</PrimaryButton>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.HasPasswordAsync(user));
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword));
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await ConcurrencyHelper.ExecuteAsync(_ => SignInManager.RefreshSignInAsync(user));
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}