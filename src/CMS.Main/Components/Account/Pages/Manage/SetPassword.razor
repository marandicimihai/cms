@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using CMS.Main.Data
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IDbContextConcurrencyHelper ConcurrencyHelper

<PageTitle>Set password</PageTitle>

<div class="max-w-screen-lg mx-auto p-4">
    <div class="mb-4">
        <h1 class="text-2xl font-semibold text-neutral-100">Set your password</h1>
        <StatusMessage Message="@message"/>
        <p class="text-sm text-neutral-400 mb-4">
            You do not have a local username/password for this site. Add a local account so you can log in without an external login.
        </p>
        <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="set-password" method="post">
            <DataAnnotationsValidator />
            <div class="mb-4">
                <label for="Input.NewPassword" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">
                    New password
                </label>
                <InputText type="password" @bind-Value="Input.NewPassword" id="Input.NewPassword" class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-4 py-3" autocomplete="new-password" placeholder="Enter the new password"/>
                <ValidationMessage For="() => Input.NewPassword" class="validation-message"/>
            </div>
            <div class="mb-4">
                <label for="Input.ConfirmPassword" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">
                    Confirm password
                </label>
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-4 py-3" autocomplete="new-password" placeholder="Enter the new password"/>
                <ValidationMessage For="() => Input.ConfirmPassword" class="validation-message"/>
            </div>
            <PrimaryButton Type="submit" Variant="ButtonVariant.Primary" Icon="lock" aria-label="Set password">Set password</PrimaryButton>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        var hasPassword = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.HasPasswordAsync(user));
        if (hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.AddPasswordAsync(user, Input.NewPassword!));
        if (!addPasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }
        await ConcurrencyHelper.ExecuteAsync(_ => SignInManager.RefreshSignInAsync(user));
        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been set.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }

}