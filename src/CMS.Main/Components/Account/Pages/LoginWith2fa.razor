@page "/Account/LoginWith2fa"

@using System.ComponentModel.DataAnnotations
@using CMS.Main.Data
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger
@inject IDbContextConcurrencyHelper ConcurrencyHelper

<PageTitle>Two-factor authentication</PageTitle>

<div class="min-h-screen bg-neutral-900 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div class="rounded-lg border border-neutral-700 bg-gradient-to-br from-neutral-800 to-neutral-900 shadow-lg p-6 text-center">
            <StatusMessage Message="@message"/>
            <h1 class="text-2xl font-semibold text-neutral-100 mb-2">Two-factor authentication</h1>
            <p class="text-sm text-neutral-400 mb-4">
                Your login is protected with an authenticator app. Enter your authenticator code below.
            </p>
            <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
                <input type="hidden" name="ReturnUrl" value="@ReturnUrl"/>
                <input type="hidden" name="RememberMe" value="@RememberMe"/>
                <DataAnnotationsValidator/>
                <ValidationSummary class="validation-summary" role="alert"/>
                <div class="space-y-4">
                    <div>
                        <label for="Input.TwoFactorCode" class="block text-xs font-medium uppercase tracking-wide text-neutral-400 mb-2">
                            Authenticator code
                        </label>
                        <InputText @bind-Value="Input.TwoFactorCode" id="Input.TwoFactorCode" class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-4 py-3" autocomplete="off"/>
                        <ValidationMessage For="() => Input.TwoFactorCode" class="validation-message"/>
                    </div>
                    <div class="flex items-center">
                        <InputCheckbox @bind-Value="Input.RememberMachine" id="remember-machine" class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-neutral-600 rounded"/>
                        <label for="remember-machine" class="ml-2 text-sm text-neutral-100">
                            Remember this machine
                        </label>
                    </div>
                    <div>
                        <PrimaryButton Type="submit" Variant="ButtonVariant.Primary" Icon="login" aria-label="Log in">Log in</PrimaryButton>
                    </div>
                </div>
            </EditForm>
            <div class="mt-6 text-center">
                <p class="text-sm text-neutral-400">
                    Don't have access to your authenticator device?
                    <a href="Account/LoginWithRecoveryCode?ReturnUrl=@ReturnUrl" class="text-purple-500 hover:text-purple-400">Log in with a recovery code</a>.
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await ConcurrencyHelper.ExecuteAsync(_ => SignInManager.GetTwoFactorAuthenticationUserAsync()) ??
               throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await ConcurrencyHelper.ExecuteAsync(_ => SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine));
        var userId = await ConcurrencyHelper.ExecuteAsync(_ => UserManager.GetUserIdAsync(user));

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }

}