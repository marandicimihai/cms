@using System.Linq
@using CMS.Main.Abstractions.Entries

<div class="flex flex-col gap-1">
    <!-- Filtering Section -->
    <section class="rounded-xl border border-neutral-800 bg-gradient-to-b from-neutral-800 to-neutral-800/90 shadow-sm p-4">
        <div class="flex items-center justify-between mb-3">
            <h3 class="text-xs uppercase tracking-wide text-neutral-100">Filters</h3>
            <SecondaryButton Type="button" Variant="ButtonVariant.Neutral" Icon="add" @onclick="AddFilter" aria-label="Add filter">Add</SecondaryButton>
        </div>

        @if (FilterRows.Any())
        {
            <div class="flex flex-col gap-1">
                @foreach (var row in FilterRows)
                {
                    var property = FilterablePropertiesCopy.FirstOrDefault(p => p.Name == row.Filter.PropertyName);
                    var filterChoices = property is null ? [] : GetFilterOptionsForProperty(property);
                    <div class="rounded-xl border border-neutral-800 bg-neutral-700 p-4" @key="row.Id">
                        <div class="flex flex-wrap items-end gap-4">
                            <!-- Property Selector -->
                            <div class="flex-1 min-w-[12rem]">
                                <label class="text-xs uppercase tracking-wide block mb-1 text-neutral-400" for="filter-property-@row.Id">Property</label>
                                <select id="filter-property-@row.Id"
                                        class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm text-neutral-100 text-sm px-3 py-2 focus:border-purple-500 focus:ring-purple-500"
                                        value="@row.Filter.PropertyName"
                                        @onchange="e => OnFilterPropertyChanged(row, e)"
                                        aria-label="Filter property">
                                    @foreach (var prop in FilterableProperties)
                                    {
                                        <option value="@prop.Name" selected="@(row.Filter.PropertyName == prop.Name)">@prop.Name</option>
                                    }
                                </select>
                            </div>
                            <!-- Filter Type Selector -->
                            <div class="w-40 min-w-[10rem]">
                                <label class="text-xs uppercase tracking-wide block mb-1 text-neutral-400" for="filter-type-@row.Id">Filter</label>
                                <select id="filter-type-@row.Id"
                                        class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm text-neutral-100 text-sm px-3 py-2 focus:border-purple-500 focus:ring-purple-500"
                                        value="@(row.Filter.FilterType)"
                                        @onchange="e => OnFilterTypeChanged(row, e)"
                                        aria-label="Filter type">
                                    @foreach (var option in filterChoices)
                                    {
                                        <option value="@option" selected="@(row.Filter.FilterType == option)">@option</option>
                                    }
                                </select>
                            </div>
                            <!-- Dynamic Field -->
                            <DynamicEntryField 
                                @ref="row.Field"
                                Property="property" />
                            <!-- Remove Filter Button -->
                            <div class="flex items-center">
                                <SecondaryButton Type="button" Variant="ButtonVariant.Neutral" Icon="close" @onclick="() => RemoveFilter(row)" aria-label="Remove filter" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </section>

    <!-- Apply Button -->
    <div class="mt-3 flex justify-end">
        <PrimaryButton Type="button" Variant="ButtonVariant.Primary" Icon="check" @onclick="ApplySortAndFilterOptions" aria-label="Apply sort and filter options">Apply</PrimaryButton>
    </div>
</div>
