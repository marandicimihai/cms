<SortAndFilterOptions 
    OnOptionsChanged="OnOptionsChangedAsync"
    FilterableProperties="Properties" />

@if (Properties != null)
{
    <Table>
        <TableHead>
            <TableRow>
                <TableHeader Class="px-3 py-2">
                    <input type="checkbox" aria-label="Select all entries" checked="@IsAllSelected" @onchange="ToggleSelectAllHandler" />
                </TableHeader>
                <TableHeader Class="font-mono text-xs">ID</TableHeader>
                @foreach (var prop in Properties)
                {
                    @if (IsSortableProperty(prop.Name))
                    {
                        <TableHeader>
                            <button type="button" class="flex items-center gap-1 cursor-pointer hover:text-neutral-100 transition-colors w-full text-left" @onclick="@(() => ToggleSortByProperty(prop.Name))">
                                <span class="uppercase">@prop.Name</span>
                                @if (CurrentSortProperty == prop.Name)
                                {
                                    <Icon Name="@(IsDescending ? "keyboard_arrow_up" : "keyboard_arrow_down")" Class="text-sm" />
                                }
                            </button>
                        </TableHeader>
                    }
                    else
                    {
                        <TableHeader>@prop.Name</TableHeader>
                    }
                }
                <TableHeader>
                    <button type="button" class="flex items-center gap-1 cursor-pointer hover:text-neutral-100 transition-colors w-full text-left" @onclick="@(() => ToggleSortByProperty("CreatedAt"))">
                        <span>Created At</span>
                        @if (CurrentSortProperty == "CreatedAt")
                        {
                            <Icon Name="@(IsDescending ? "keyboard_arrow_up" : "keyboard_arrow_down")" Class="text-sm" />
                        }
                    </button>
                </TableHeader>
                <TableHeader>
                    <button type="button" class="flex items-center gap-1 cursor-pointer hover:text-neutral-100 transition-colors w-full text-left" @onclick="@(() => ToggleSortByProperty("UpdatedAt"))">
                        <span>Updated At</span>
                        @if (CurrentSortProperty == "UpdatedAt")
                        {
                            <Icon Name="@(IsDescending ? "keyboard_arrow_up" : "keyboard_arrow_down")" Class="text-sm" />
                        }
                    </button>
                </TableHeader>
                <TableHeader Class="text-right">Actions</TableHeader>
            </TableRow>
        </TableHead>
        <TableBody>
        @if (Entries.Any())
        {
            @foreach (var entry in Entries)
            {
                <TableRow>
                    <TableData Class="px-3 py-2">
                        <input type="checkbox" aria-label="Select entry @entry.Id" checked="@IsEntrySelected(entry.Id)" @onchange="@(e => ToggleEntrySelection(entry, e.Value as bool? ?? false))" />
                    </TableData>
                    <TableData Class="font-mono text-xs whitespace-nowrap">@entry.Id</TableData>
                    @foreach (var prop in Properties)
                    {
                        var cellValue = GetEntryPropertyValue(entry, prop.Name);
                        <TableData Class="truncate max-w-[240px]">
                            @FormatCell(cellValue)
                        </TableData>
                    }
                    <TableData Class="whitespace-nowrap">
                        @FormatCell(entry.CreatedAt)
                    </TableData>
                    <TableData Class="whitespace-nowrap">
                        @FormatCell(entry.UpdatedAt)
                    </TableData>
                    <TableData Class="text-right flex gap-2 justify-end">
                        <ButtonGroup>
                            <PrimaryButton Variant="ButtonVariant.Primary" Icon="edit" @onclick="@(() => OpenEditEntryModal(entry.Id))" aria-label="Edit Entry">Edit</PrimaryButton>
                            <PrimaryButton Variant="ButtonVariant.Danger" Icon="delete" @onclick="() => OnDeleteEntry(entry)" aria-label="Delete Entry">Delete</PrimaryButton>
                        </ButtonGroup>
                    </TableData>
                </TableRow>
            }
        }
        else
        {
            <TableRow>
                <TableData Class="px-3 py-4 text-neutral-400 text-sm" colspan="@((Properties.Count + 5).ToString())">No entries yet.</TableData>
            </TableRow>
        }
        </TableBody>
    </Table>

    @if (SelectedEntries.Count > 0)
    {
        <div class="flex items-center justify-between mt-4 p-4 rounded-xl border border-neutral-800 bg-gradient-to-b from-neutral-800 to-neutral-800/90 shadow-sm">
            <span class="text-sm text-neutral-100">@SelectedEntries.Count entr@(SelectedEntries.Count == 1 ? "y" : "ies") selected</span>
            <ButtonGroup>
                <SecondaryButton Variant="ButtonVariant.Neutral" @onclick="ClearSelection" aria-label="Cancel selection">Cancel</SecondaryButton>
                <PrimaryButton Variant="ButtonVariant.Danger" Icon="delete" @onclick="DeleteSelectedEntriesAsync" aria-label="Delete selected entries">Delete</PrimaryButton>
            </ButtonGroup>
        </div>
    }

    @if (HasMoreEntries)
    {
        <div class="mt-3 flex">
            <SecondaryButton Type="button" Variant="ButtonVariant.Neutral" @onclick="LoadMoreEntriesAsync" aria-label="Load more entries" disabled="@isLoadingMore">
                @if (isLoadingMore)
                {
                    <Icon Name="progress_activity" Class="text-2xl animate-spin mx-auto" />
                }
                else
                {
                    <span class="flex-1 text-center">Load More</span>
                }
            </SecondaryButton>
        </div>
    }
}

<EntryEditModal @ref="editEntryModal" OnEntryUpdated="HandleEntryUpdated" />