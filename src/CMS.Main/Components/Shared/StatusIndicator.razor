@rendermode InteractiveServer

@if (visible)
{
    @switch (severity)
    {
        case StatusSeverity.Success:
            <div
                class="flex items-center justify-between rounded-md shadow px-4 py-2 mb-4 bg-emerald-100 text-emerald-900"
                role="status">
                <span class="text-sm font-medium">
                    @message
                </span>
                <button type="button" @onclick="() => Hide()" aria-label="Close"
                        class="ml-2 p-1 rounded hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <span class="material-symbols-outlined icons-default text-base">close</span>
                </button>
            </div>
            break;
        case StatusSeverity.Warning:
            <div class="flex items-center justify-between rounded-md shadow px-4 py-2 mb-4 bg-amber-100 text-amber-900"
                 role="status">
                <span class="text-sm font-medium">
                    @message
                </span>
                <button type="button" @onclick="() => Hide()" aria-label="Close"
                        class="ml-2 p-1 rounded hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <span class="material-symbols-outlined icons-default text-base">close</span>
                </button>
            </div>
            break;
        case StatusSeverity.Error:
            <div class="flex items-center justify-between rounded-md shadow px-4 py-2 mb-4 bg-rose-100 text-rose-900"
                 role="status">
                <span class="text-sm font-medium">
                    @message
                </span>
                <button type="button" @onclick="() => Hide()" aria-label="Close"
                        class="ml-2 p-1 rounded hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <span class="material-symbols-outlined icons-default text-base">close</span>
                </button>
            </div>
            break;
        default:
            <div class="flex items-center justify-between rounded-md shadow px-4 py-2 mb-4 bg-blue-100 text-blue-900"
                 role="status">
                <span class="text-sm font-medium">
                    @message
                </span>
                <button type="button" @onclick="() => Hide()" aria-label="Close"
                        class="ml-2 p-1 rounded hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <span class="material-symbols-outlined icons-default text-base">close</span>
                </button>
            </div>
            break;
    }
}

@code {

    public enum StatusSeverity
    {
        Info,
        Success,
        Warning,
        Error
    }

    private bool visible;
    private StatusSeverity severity = StatusSeverity.Info;

    [Parameter]
    public EventCallback OnClose { get; set; }

    private string? message;

    [Parameter]
    public string? InitialMessage { get; set; }
    
    [Parameter]
    public StatusSeverity InitialSeverity { get; set; } = StatusSeverity.Info;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(InitialMessage))
        {
            message = InitialMessage;
            severity = InitialSeverity;
            visible = true;
        }
    }

    public void Show(string newMessage, StatusSeverity newSeverity = StatusSeverity.Info)
    {
        severity = newSeverity;
        message = newMessage;
        visible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        visible = false;
        if (OnClose.HasDelegate)
            OnClose.InvokeAsync();
    }

}
