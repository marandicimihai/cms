@using System.Globalization
@using Ardalis.Result
@using CMS.Shared.DTOs.SchemaProperty

<div class="flex flex-col gap-1">
    <label class="text-xs uppercase tracking-wide text-slate-600" for="field-@SchemaProperty.Id">
        @SchemaProperty.Name
        @if (SchemaProperty.IsRequired)
        {
            <span class="text-rose-600">*</span>
        }
        @if (SchemaProperty.Type == SchemaPropertyType.Integer)
        {
            <span class="text-xs normal-case font-normal"> (integer)</span>
        }
        else if (SchemaProperty.Type == SchemaPropertyType.Decimal)
        {
            <span class="text-xs normal-case font-normal"> (decimal)</span>
        }
    </label>
    <div class="flex items-center gap-2">
        <div class="flex-1">
            @switch (SchemaProperty.Type)
            {
                case SchemaPropertyType.Text:
                    <input id="field-@SchemaProperty.Id" type="text" class="block w-full rounded-md border border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm px-3 py-2 @(IsNull ? "bg-slate-100 text-slate-500 cursor-not-allowed" : "")" value="@BindConverter.FormatValue(Value)" @oninput="OnInputChanged" aria-label="@SchemaProperty.Name" aria-invalid="@HasError" disabled="@IsNull" />
                    break;
                case SchemaPropertyType.Integer:
                    <input id="field-@SchemaProperty.Id" type="number" class="block w-full rounded-md border border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm px-3 py-2 @(IsNull ? "bg-slate-100 text-slate-500 cursor-not-allowed" : "")" value="@BindConverter.FormatValue(Value)" @onchange="OnInputChanged" aria-label="@SchemaProperty.Name" aria-invalid="@HasError" disabled="@IsNull" />
                    break;
                case SchemaPropertyType.Decimal:
                    <input id="field-@SchemaProperty.Id" type="number" step="any" class="block w-full rounded-md border border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm px-3 py-2 @(IsNull ? "bg-slate-100 text-slate-500 cursor-not-allowed" : "")" value="@BindConverter.FormatValue(Value)" @onchange="OnInputChanged" aria-label="@SchemaProperty.Name" aria-invalid="@HasError" disabled="@IsNull" />
                    break;
                case SchemaPropertyType.Boolean:
                    <div class="flex items-center gap-2 py-2">
                        <input id="field-@SchemaProperty.Id" type="checkbox" class="h-4 w-4 rounded border-slate-300 text-blue-600 focus:ring-blue-500 @(IsNull ? "bg-slate-100 text-slate-500 cursor-not-allowed" : "")" checked="@(Value is true)" @onchange="OnInputChanged" aria-label="@SchemaProperty.Name" aria-invalid="@HasError" disabled="@IsNull" />
                        <span class="text-sm text-slate-700">@(Value?.ToString()?.ToLowerInvariant() == "true" ? "true" : "false")</span>
                    </div>
                    break;
                case SchemaPropertyType.DateTime:
                    <input id="field-@SchemaProperty.Id" type="datetime-local" class="block w-full rounded-md border border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm px-3 py-2 @(IsNull ? "bg-slate-100 text-slate-500 cursor-not-allowed" : "")" value="@FormatDateTimeLocal(Value)" @onchange="OnInputChanged" aria-label="@SchemaProperty.Name" aria-invalid="@HasError" disabled="@IsNull" />
                    break;
                case SchemaPropertyType.Enum:
                    <select id="field-@SchemaProperty.Id" class="block w-full rounded-md border border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm px-3 py-2 @(IsNull ? "bg-slate-100 text-slate-500 cursor-not-allowed" : "")" value="@BindConverter.FormatValue(Value)" @onchange="OnInputChanged" aria-label="@SchemaProperty.Name" aria-invalid="@HasError" disabled="@IsNull">
                        <option value="">-- select --</option>
                        @if (SchemaProperty.Options != null)
                        {
                            foreach (var opt in SchemaProperty.Options)
                            {
                                <option value="@opt">@opt</option>
                            }
                        }
                    </select>
                    break;
                default:
                    <div class="text-rose-600 text-sm">Unsupported type: @SchemaProperty.Type</div>
                    break;
            }
        </div>
        @if (!SchemaProperty.IsRequired)
        {
            <div class="flex items-center gap-1">
                <input id="toggle-@SchemaProperty.Id" type="checkbox" class="h-4 w-4 rounded border-slate-300 text-blue-600 focus:ring-blue-500" checked="@IsNull" @onchange="OnIsNullChanged" aria-label="Enable field" />
                <label class="text-xs text-slate-600" for="toggle-@SchemaProperty.Id">null</label>
            </div>
        }
    </div>
    @if (HasError)
    {
        <span class="text-rose-600 text-xs mt-1" role="alert">@ValidationMessage</span>
    }
</div>

<div class="hidden bg-slate-100 text-slate-500 cursor-not-allowed"></div>

@code {
    [Parameter, EditorRequired]
    public SchemaPropertyDto SchemaProperty { get; set; } = default!;

    private object? Value { get; set; }
    private object? TempValue { get; set; }
    
    private string? ValidationMessage { get; set; }
    private bool HasError => !string.IsNullOrEmpty(ValidationMessage);

    private bool IsNull { get; set; }

    protected override void OnInitialized()
    {
        Value = SchemaProperty.Type switch
        {
            SchemaPropertyType.Boolean => false,
            _ => null
        };
        IsNull = false;
    }

    private void OnIsNullChanged(ChangeEventArgs e)
    {
        IsNull = e.Value?.ToString() == "true" || e.Value is true;
        if (IsNull)
        {
            TempValue = Value;
            Value = null;
            ValidationMessage = null;
        }
        else
        {
            Value = TempValue;
            Validate();
        }
        StateHasChanged();
    }

    private void OnInputChanged(ChangeEventArgs e)
    {
        var input = e.Value?.ToString();
        if (SchemaProperty.Type == SchemaPropertyType.DateTime)
        {
            if (!string.IsNullOrWhiteSpace(input))
            {
                // Parse as local time, convert to UTC
                if (DateTime.TryParse(input, CultureInfo.InvariantCulture, DateTimeStyles.None, out var localDt))
                {
                    var local = DateTime.SpecifyKind(localDt, DateTimeKind.Local);
                    Value = local.ToUniversalTime().ToString("o");
                }
                else
                {
                    Value = input; // fallback, will fail validation
                }
            }
            else
            {
                Value = null;
            }
        }
        else
        {
            Value = input;
        }
        
        Validate();
    }

    private string? FormatDateTimeLocal(object? value)
    {
        if (value is string s && DateTime.TryParse(s, null, DateTimeStyles.RoundtripKind, out var utcDt))
        {
            return utcDt.ToLocalTime().ToString("yyyy-MM-ddTHH:mm");
        }
        return null;
    }
    
    private void Validate()
    {
        ValidationMessage = null;

        var value = Value;
        var validationResult = PropertyValidationExtensions.ValidateProperty(SchemaProperty, ref value);
        if (validationResult.IsInvalid() && validationResult.ValidationErrors.Any())
        {
            ValidationMessage = validationResult.ValidationErrors.First().ErrorMessage;
        }
    }

    public void Reset()
    {
        Value = SchemaProperty.Type switch
        {
            SchemaPropertyType.Boolean => false,
            _ => null
        };
        ValidationMessage = null;
    }

    public (SchemaPropertyDto, object?) GetPropertyAndValue()
    {
        if (SchemaProperty.Type == SchemaPropertyType.DateTime && Value is DateTime dt)
        {
            // Always return ISO 8601 UTC string for DateTime
            return (SchemaProperty, dt.ToUniversalTime().ToString("o"));
        }
        return (SchemaProperty, Value);
    }

    public bool IsValid()
    {
        Validate();
        return !HasError;
    }

}