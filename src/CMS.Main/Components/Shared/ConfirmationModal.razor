@rendermode InteractiveServer
@inject IJSRuntime Js
@inject ConfirmationService ConfirmationService

@if (ConfirmationService.IsOpen)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/40 backdrop-blur opacity-100"
         aria-modal="true" role="dialog" tabindex="-1" @onkeydown="HandleKeyDown">
        <div
            class="rounded-xl border border-neutral-800 bg-gradient-to-b from-neutral-800 to-neutral-800/90 shadow-sm p-4 max-w-md w-full mx-4 overflow-auto max-h-screen">
            <div class="mb-2 flex items-center gap-2">
                <span class="material-symbols-outlined icons-default text-purple-500 text-xl"
                      aria-hidden="true">help</span>
                <h2 class="text-lg font-medium text-neutral-100">@ConfirmationService.CurrentRequest?.Title</h2>
            </div>
            <div class="text-sm text-neutral-400 mb-4">@ConfirmationService.CurrentRequest?.Message</div>
            <div class="flex gap-4 justify-end">
                <ButtonGroup>
                    <PrimaryButton Variant="ButtonVariant.Neutral" @onclick="OnCancelClicked" aria-label="@ConfirmationService.CurrentRequest?.CancelText">
                        @ConfirmationService.CurrentRequest?.CancelText
                    </PrimaryButton>

                    <PrimaryButton Variant="ButtonVariant.Danger" @onclick="OnConfirmClicked" aria-label="@ConfirmationService.CurrentRequest?.ConfirmText">
                        @ConfirmationService.CurrentRequest?.ConfirmText
                    </PrimaryButton>
                </ButtonGroup>
            </div>
        </div>
    </div>
}

@code {

    protected override void OnInitialized()
    {
        ConfirmationService.OnStateChanged += () => InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ConfirmationService.IsOpen)
        {
            await Js.InvokeVoidAsync("eval", "setTimeout(()=>document.querySelector('[role=dialog]').focus(),0)");
        }
    }

    private void OnConfirmClicked()
    {
        ConfirmationService.Confirm();
    }

    private void OnCancelClicked()
    {
        ConfirmationService.Cancel();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (!ConfirmationService.IsOpen) return;
        if (e.Key == "Escape")
        {
            OnCancelClicked();
        }
    }

}
