@using CMS.Main.Abstractions.Properties.PropertyTypes
@using CMS.Main.DTOs
@implements IPropertyInput

<input @oninput="HandleChange"
    id="field-@Property.Id"
    value="@Value"
    type="text"
    class="block w-full rounded-full border border-neutral-600 bg-neutral-700 shadow-sm focus:border-purple-500 focus:ring-purple-500 text-neutral-100 text-sm px-3 py-2 @(Disabled ? "bg-neutral-700 text-neutral-500 cursor-not-allowed" : "")"
    disabled="@Disabled" />

@code {
    [Parameter, EditorRequired]
    public PropertyDto Property { get; set; } = default!;

    [Parameter]
    public EventCallback<object?> ValueChanged { get; set; }

    [Parameter]
    public object? InitialValue { get; set; }

    private string? Value { get; set; }

    private bool Disabled { get; set; } = false;

    protected override void OnInitialized()
    {
        if (Property.Type != PropertyType.Text) 
        {
            throw new InvalidOperationException($"TextPropertyInput can only be used with PropertyType.Text, but got {Property.Type}");
        }

        Value = InitialValue?.ToString() ?? string.Empty;
    }

    private async Task HandleChange(ChangeEventArgs e)
    {
        Value = e.Value?.ToString() ?? string.Empty;

        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(Value);
        }
    }

    public object? GetValue() => Value;

    public void SetDisabled(bool disabled)
    {
        Disabled = disabled;
    }

    public void Reset()
    {
        Value = InitialValue?.ToString() ?? string.Empty;
    }
}

