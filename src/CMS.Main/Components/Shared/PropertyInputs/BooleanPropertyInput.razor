@using CMS.Main.Abstractions.Properties.PropertyTypes
@using CMS.Main.DTOs
@implements IPropertyInput

<div class="flex items-center gap-2">
    <input @onchange="HandleChange"
        id="field-@Property.Id"
        checked="@Value"
        type="checkbox"
        class="h-4 w-4 rounded border-slate-300 text-blue-600 focus:ring-blue-500 @(Disabled ? "bg-slate-100 text-slate-500 cursor-not-allowed" : "")"
        disabled="@Disabled" />
    <span class="text-sm text-slate-600">@(Value ? "true" : "false")</span>
</div>

@code {
    [Parameter, EditorRequired]
    public PropertyDto Property { get; set; } = default!;

    [Parameter]
    public EventCallback<object?> ValueChanged { get; set; }

    [Parameter]
    public object? InitialValue { get; set; }

    private bool Value { get; set; } = false;

    private bool Disabled { get; set; } = false;

    protected override void OnInitialized()
    {
        if (Property.Type != PropertyType.Boolean)
        {
            throw new InvalidOperationException($"BooleanPropertyInput can only be used with PropertyType.Boolean, but got {Property.Type}");
        }
        
        if (InitialValue is not null and bool b)
        {
            Value = b;
        }
    }

    private async Task HandleChange(ChangeEventArgs e)
    {
        Value = e.Value is bool b ? b : false;

        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(Value);
        }
    }

    public object? GetValue() => Value;

    public void SetDisabled(bool disabled)
    {
        Disabled = disabled;
    }

    public void Reset()
    {
        if (InitialValue is not null and bool b)
        {
            Value = b;
        }
    }
}
